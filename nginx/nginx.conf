worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    lua_shared_dict jwt_secrets 1m;

    init_by_lua_block {
        local jwt = require "resty.jwt"
        local cjson = require "cjson"

        local secrets = ngx.shared.jwt_secrets
        secrets:set("secret_key", "mySuperSecretKey")
    }

    server {
        listen 80;

        # location / {
        #     proxy_pass http://user_service:5000;
        # }

        location /product {
            # access_by_lua_block {
            #     local jwt = require "resty.jwt"
            #     local cjson = require "cjson"

            #     local auth_header = ngx.var.http_Authorization
            #     if not auth_header then
            #         ngx.status = ngx.HTTP_UNAUTHORIZED
            #         ngx.say(cjson.encode({ message = "Missing Authorization header" }))
            #         ngx.exit(ngx.HTTP_UNAUTHORIZED)
            #     end

            #     local token = auth_header:match("Bearer%s+(.+)")
            #     if not token then
            #         ngx.status = ngx.HTTP_UNAUTHORIZED
            #         ngx.say(cjson.encode({ message: "Invalid Authorization header" }))
            #         ngx.exit(ngx.HTTP_UNAUTHORIZED)
            #     end

            #     local jwt_obj = jwt:verify(secrets:get("secret_key"), token)
            #     if not jwt_obj.verified then
            #         ngx.status = ngx.HTTP_UNAUTHORIZED
            #         ngx.say(cjson.encode({ message: "Invalid token" }))
            #         ngx.exit(ngx.HTTP_UNAUTHORIZED)
            #     end

            #     ngx.req.set_header("X-User-ID", jwt_obj.payload.id)
            #     ngx.req.set_header("X-User-Username", jwt_obj.payload.username)
            # }
            proxy_pass http://product_service:5001/product;
        }

        # location /other_service {
        #     proxy_pass http://other_service:5002;
        # }
    }
}
